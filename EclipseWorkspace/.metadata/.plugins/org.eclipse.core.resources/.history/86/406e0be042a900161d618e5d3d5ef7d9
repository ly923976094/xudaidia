package daidai.com;

import java.sql.Connection;

import java.util.List;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.sql.Timestamp;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Scanner;

import javax.swing.text.html.HTMLDocument.Iterator;

import com.hx.connect.ConnDB;
import com.hx.connect.Departure_Rate;
import com.hx.connect.Order_CancelRate;
import com.hx.connect.Ticket_CancleRate;
import com.hx.connect.Ticket_OutRate;



public class Ri {

//	private static Object list;

	
	
	

	public static void main(String args[]) {
		  Scanner sc = new Scanner(System.in);
		  String pnr=null;//pnrb编号
	      String name = null;//输入乘客英文姓名
 	      String number = null;//输入的证件号
	      String agent=null;//输入订票的代理人号
//	      String noid=null;//pnr中第几个人
	      String noid_number[][]=null;//
	      /*String ticketout_time=null;//输入出票时间
	      String flight_time=null;//输入起飞时间
	      String level=null;//输入舱位等级
*/	      int flag = 0;//是否存在用户
	      int t=0;
	      int different=0;//起飞时间与出票时间相距差值
	    try {
	      Class.forName("com.mysql.jdbc.Driver");     //加载MYSQL JDBC驱动程序   
	      //Class.forName("org.gjt.mm.mysql.Driver");
	     //System.out.println("Success loading Mysql Driver!");
	    }
	    catch (Exception e) {
	      System.out.print("Error loading Mysql Driver!");
	      e.printStackTrace();
	    }
	    try {
	    	 
	      Connection connect = DriverManager.getConnection(
	          "jdbc:mysql://localhost:3306/test","root","root");
	           //连接URL为   jdbc:mysql//服务器地址/数据库名  ，后面的2个参数分别是登陆用户名和密码

          System.out.println("Success connect Mysql server!");
	      Statement stmt = connect.createStatement();
	      System.out.println("请输入乘客姓名  证件号  订票代理号：");
//	      System.out.println("请输入PNR记录编号：");
	      
	      while(sc.hasNext()){//输入数据
	    	  
	    	  
	    	 /* name = sc.next();//姓名
	    	  number = sc.next();//证件号
	    	  agent = sc.next();//订票代理号
*/	         /* ticketout_time = sc.next();//出票时间
	    	  flight_time = sc.next();//起飞时间
	    	  level = sc.next();//舱位等级
*/	    	  	            
		     /* System.out.println("姓名:"+name+" 证件号:"+number+"订票代理号:"+agent); 
		      System.out.println("正在查询，请稍后...");*/
	    	  pnr=sc.next();//输入pnr编号
	    	  ResultSet rs1=stmt.executeQuery("select name_order_id,person_id from ana_id where locator_id='"+pnr+"';");
    
	    	  System.out.println(pnr);

	       /* List  list = new ArrayList();
	    	int i=0;
	    	while (rs1.next()) {
	    		i++;
	    		System.out.println("i="+i);
	    		Orgregest org = new Orgregest();
	    		org.setName_order_id(rs1.getString("name_order_id"));
	    		org.setPerson_id(rs1.getString("person_id"));
	    		list.add(org);
	    		}
	    	Iterator iterator = (Iterator) list.iterator();
	        while (iterator.next()) {
	            System.out.println(iterator.next());
	        }
	    	*/
	    	
	    	  /*int i=0,j=0;
	    	  while(rs1.next())
	    	  {
	    		  j++;
	    		  System.out.println("j="+j);
	    		  noid_number[i++][0]=rs1.getString("name_order_id");
	    		  noid_number[i++][1]=rs1.getString("person_id ");
	    	  }
	    	  while(i>=0)
	    		  {
                      i--;    		  
//	    		  System.out.println("用户id，number依次为："+noid_number[i--][0]+" "+noid_number[i--][1]);
	    		  }
	    	  ResultSet rs2=stmt.executeQuery("select order_time,agent from ana_pnr where locator_id='pnr';");
	    	  */
	    	//  ResultSet rs3=stmt.executeQuery("select en_name from ana_name where ");
	    	  
	    	  
	    	  
		      ResultSet rs = stmt.executeQuery("select psg_name, doc_docnumber from ri_departure_psg where doc_docnumber is not NULL;");//为你表的名称		      
			  while (rs.next()) {
			        if(rs.getString("doc_docnumber").equals(number)){//是否证件号一致
			        	//System.out.println("1")；
			        	    t = 1;
			        	if(rs.getString("psg_name").equals(name)){//姓名是否一致
			        		flag = 1;
			        		break;
			        	}
			        }		        
			      }
// 如果离港信息中有此乘客
			  if(flag == 1&&t==1){
//       计算乘客出票率   
//				 System.out.println("flag="+flag);
				     Ticket_OutRate ticket=new Ticket_OutRate() ; 
				     double v1=ticket.getTicket_review(name);
			   	     System.out.println("乘客"+name+"出票率为："+v1);
					//ticket.getTicket_review();
//	            计算乘客出行率
			   	   Departure_Rate psgnum=new Departure_Rate();
					float a,b;
					double v2;
					a=psgnum.getPsgNum1(name);
					b=psgnum.getPsgNum2(name);
					v2=a/b;
					if(b==0){
							v2=0;
						System.out.println("乘客"+name+"出行率为:"+v2);
						}
					else{
						System.out.println("乘客"+name+"出行率为:"+v2);
					}
//	        计算代理人取消订单频率
					double v3;
					Order_CancelRate cancelrate=new Order_CancelRate();
				 	v3=cancelrate.getPsgNum3(agent);
					//cancelrate.getPsgNum3();
				 	System.out.println("代理"+agent+"订单取消率为:"+v3);
//     计算代理人退票率
//				 	String gds=input.nextLine();
				 	Ticket_CancleRate agentNum=new Ticket_CancleRate ();
					float c=0,d=0;
					double v4=0;
					c=agentNum.getAgentNum1(agent);
					System.out.println("c="+c);
					
					d=agentNum.getAgentNum2(agent);
					System.out.println("d="+d);
					
					
					v4=c/d;
					if(d==0)
					      {v4=0;}
					System.out.println("代理"+agent+"退票率为:"+v4);
				 	
//			        System.out.println("乘客信息为真");
//     根据判定条件给出乘客的距离起飞时间短近程度得分
					SimpleDateFormat dataFormat = new SimpleDateFormat("yyyy/MM/dd hh:mm:ss");//如2016/08/10 20:40:00  
					
					System.out.println("请输入乘客出票时间："); 
					String ticketout_time1=sc.next();//2016/08/10
					String ticketout_time2=sc.next();//20:40:00
					String ticketout_time=ticketout_time1+" "+ticketout_time2;//显示2016/08/10 20:40:00
         			Date fromDate = (Date)dataFormat.parse(ticketout_time);
					
					
					
				    System.out.println("请输入乘客起飞时间：");
				    String flight_time1=sc.next();//2016/10/20
				    String flight_time2=sc.next();//10:10:00 
				    String flight_time=flight_time1+" "+flight_time2;//显示2016/08/10 10:10:00
					Date toDate = (Date)dataFormat.parse(flight_time);
				    
				    
				   long from = fromDate.getTime();  
				   long to = toDate.getTime();  
				   int days = (int) ((to - from)/(1000 * 60 * 60 * 24));  

				   double v5=0;
				 
				if(days<1)
				  {v5=(double)8/36;}
				  else if (days>1&&days<7)
				  {v5=(double)7/36;}
				  else if(days>7&&days<15)
				  {v5=(double)6/36;}
				  else if(days>15&&days<30)
				  {v5=(double)5/36;}
				  else if(days>30&&days<60)
				  {v5=(double)4/36;}
				  else if(days>60&&days<120)
				  {v5=(double)3/36;}
				  else if(days>120&&days<365)
				  {v5=(double)2/36;}
				  else if(days>365)
				  {v5=(double)1/36;}
				  
				  System.out.println("乘客距离起飞时间距离程度短近得分为："+v5);
					
//	      根据判定条件给出票面等级得分
				 
				  System.out.println("请输入舱位等级："); 
				  String level=sc.next();//舱位等级
			      char bm=level.charAt(0);
//			     			  
			      double v6=0;
				  if(bm=='P'||bm=='F'||bm=='A')
				  {
//					  System.out.println(bm);
					  v6=(double)5/15;
//					  System.out.println(v6);
				  }
				  else if(bm=='J'||bm=='C'||bm=='D'||bm=='Z'||bm=='R')
				  {
					  v6=(double)4/15;
				  }
				  else if(bm=='G'||bm=='E'||bm=='Y')
				  {
					  v6=(double)3/15;
				  }
				  else if(bm=='B'||bm=='M'||bm=='U'||bm=='H'||bm=='Q'||bm=='V')
				  {
					  v6=(double)2/15;
				  }
				  else if(bm=='W'||bm=='S'||bm=='T'||bm=='L'||bm=='K'||bm=='N')
				  {
					  v6=(double)1/15;
				  }
				  System.out.println("乘客舱位等级得分为："+v6);
//计算综合得分
			 	
			 	 double sum=0.3056*(v1*0.0727+v2*0.9273)+0.4918*(1-0.7458*v3-0.2542*v4)+0.1248*v5+0.0778*v6;
			 	 
			 	 System.out.println("乘客的综合得分为："+sum);
				   
					flag = 0;
				    t=0;
				  
			  }
//乘客信息为假
			  else if(flag == 0&&t==1){
//          乘客综合得分为0
				  
				  
              System.out.println("此乘客姓名为虚假！综合得分为0！");
			  }
//离港信息中无此乘客
			  else{
				  
//          计算代理人取消订单频率
				  double v3;
					Order_CancelRate cancelrate=new Order_CancelRate();
				 	v3=cancelrate.getPsgNum3(agent);
					//cancelrate.getPsgNum3();
				 	System.out.println("代理"+agent+"订单取消率为:"+v3);
				  
//          计算代理人退票率
				 	Ticket_CancleRate agentNum=new Ticket_CancleRate ();
				    double c=0,d=0,v4=0;
				    d=agentNum.getAgentNum2(agent);
//					System.out.println("d="+d);
					
					c=agentNum.getAgentNum1(agent);
//					System.out.println("c="+c);
					
					v4=c/d;
					if(d==0)
					      {v4=0;}
					System.out.println("代理"+agent+"退票率为:"+v4);

//			根据判定条件给出乘客的距离起飞时间短近程度得分
SimpleDateFormat simpleFormat = new SimpleDateFormat("yyyy/MM/dd hh:mm:ss");//如2016/08/10 20:40:00  
					
					System.out.println("请输入乘客出票时间："); 
					String ticketout_time1=sc.next();//2016/08/10
					String ticketout_time2=sc.next();//20:40:00
					String ticketout_time=ticketout_time1+" "+ticketout_time2;//显示2016/08/10 20:40:00
					Date fromDate = (Date) simpleFormat.parse(ticketout_time);
					
					
					
				    System.out.println("请输入乘客起飞时间：");
				    String flight_time1=sc.next();//2016/10/20
				    String flight_time2=sc.next();//10:10:00 
				    String flight_time=flight_time1+" "+flight_time2;//显示2016/08/10 10:10:00
					Date toDate = (Date) simpleFormat.parse(flight_time);
				    
				    
				   long from = fromDate.getTime();  
				   long to = toDate.getTime();  
				   int days = (int) ((to - from)/(1000 * 60 * 60 * 24));  

				   double v5=0;
				 
				if(days<1)
				  {v5=(double)8/36;}
				  else if (days>1&&days<7)
				  {v5=(double)7/36;}
				  else if(days>7&&days<15)
				  {v5=(double)6/36;}
				  else if(days>15&&days<30)
				  {v5=(double)5/36;}
				  else if(days>30&&days<60)
				  {v5=(double)4/36;}
				  else if(days>60&&days<120)
				  {v5=(double)3/36;}
				  else if(days>120&&days<365)
				  {v5=(double)2/36;}
				  else if(days>365)
				  {v5=(double)1/36;}
				  
				  System.out.println("乘客距离起飞时间距离程度短近得分为："+v5);
						
									
//			根据判定条件给出票面等级得分	
				  System.out.println("请输入舱位等级："); 
				  String level=sc.next();//舱位等级
			      char bm=level.charAt(0);
			      System.out.println(bm);
				  
			      double v6=0;
				  if(bm=='P'||bm=='F'||bm=='A')
				  {
					
					  v6=(double)5/15;
				  }
				  else if(bm=='J'||bm=='C'||bm=='D'||bm=='Z'||bm=='R')
				  {
					  v6=(double)4/15;
				  }
				  else if(bm=='G'||bm=='E'||bm=='Y')
				  {
					  v6=(double)3/15;
				  }
				  else if(bm=='B'||bm=='M'||bm=='U'||bm=='H'||bm=='Q'||bm=='V')
				  {
					  v6=(double)2/15;
				  }
				  else if(bm=='W'||bm=='S'||bm=='T'||bm=='L'||bm=='K'||bm=='N')
				  {
					  v6=(double)1/15;
				  }
				  System.out.println("乘客舱位等级得分为："+v6);
				  
//计算综合得分
				  double sum=0.4918*(1-0.7458*v3-0.2542*v4)+0.1248*v5+0.0778*v6;
				 	 
				 	 System.out.println("乘客的综合得分为："+sum);
				  
				  
				  
//			  System.out.println("离港信息中无此乘客！");
			  }
	    }
		    }
	    catch (Exception e) {
	      System.out.print("get data error!");
	      e.printStackTrace();
	    }
	    
	  }
	
}
class Orgregest
{
	String name_order_id;
	String person_id;
	public String getName_order_id() {
		return name_order_id;
	}
	public void setName_order_id(String name_order_id) {
		this.name_order_id = name_order_id;
	}
	public String getPerson_id() {
		return person_id;
	}
	public void setPerson_id(String person_id) {
		this.person_id = person_id;
	}
	

}